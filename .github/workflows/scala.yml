name: 'Publish Lambda and Deploy Services with Terraform'

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write

env:
  TF_VAR_LAMBDA_BUCKET: "${{ vars.TF_VAR_RECIPIENT }}-${{ vars.TF_VAR_DISCORD_NAME }}-lambda-functions"

jobs:
  build-lambda:
    name: 'Build Lambda'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Build SBT
        run: sbt compile

  test-lambda:
    name: 'Test Lambda'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Build and Test with Coverage
        run: |
          sbt coverage test
          sbt coverageReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish-lambda:
    name: 'Publish Lambda'
    runs-on: ubuntu-latest
    environment: development
    needs: [build-lambda, test-lambda]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Assemble New Lambda Function
        id: assemble-lambda-function
        run: |
          ASSEMBLY_PATH=$(sbt assembly | grep -e "Assembly jar up to date: " -e "Built: " | awk -F' ' '{print $NF}' | awk -F".jar" '{printf "%s.jar", $1}')
          echo "ASSEMBLY_PATH=$ASSEMBLY_PATH" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_FILE=$(basename $ASSEMBLY_PATH)" >> $GITHUB_OUTPUT

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create (if exists) S3 bucket
        run: aws s3 mb "s3://${{ env.TF_VAR_LAMBDA_BUCKET }}"

      - name: Copy Program to S3 Bucket
        run: aws s3 cp ${{ steps.assemble-lambda-function.outputs.ASSEMBLY_PATH }} "s3://${{ env.TF_VAR_LAMBDA_BUCKET }}"

      - name: Upload dependency graph
        uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91

  check-terraform:
    name: 'Check Terraform'
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check

  plan-terraform-development:
    name: 'Plan Terraform Development'
    runs-on: ubuntu-latest
    environment: development
    needs: check-terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      env:
        TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
        TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
        TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
        TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
        TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_ZIP }}
        TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
        TF_VAR_region: ${{ vars.AWS_REGION }}
      run: terraform plan

  publish-terraform-development:
    name: 'Publish Terraform Development'
    runs-on: ubuntu-latest
    environment: development
    needs: [publish-lambda, plan-terraform-development]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        env:
          TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
          TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
          TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_ZIP }}
          TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
          TF_VAR_region: ${{ vars.AWS_REGION }}
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch1')
        run: terraform apply -auto-approve

  plan-terraform-production:
    name: 'Plan Terraform Production'
    runs-on: ubuntu-latest
    environment: production
    needs: check-terraform

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        env:
          TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
          TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
          TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_ZIP }}
          TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform plan

  publish-terraform-production:
    name: 'Publish Terraform Production'
    runs-on: ubuntu-latest
    environment: production
    needs: [publish-lambda, plan-terraform-production, publish-terraform-development]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        env:
          TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
          TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
          TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_ZIP }}
          TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
          TF_VAR_region: ${{ vars.AWS_REGION }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
