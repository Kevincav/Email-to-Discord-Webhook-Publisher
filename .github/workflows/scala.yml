name: 'Publish Lambda and Deploy Services with Terraform'

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  TF_VAR_LAMBDA_PATH: "target/scala-2.13/DiscordEmailWebhook-assembly-v1.0.0.jar"
  TF_VAR_TERRAFORM_PATH_DEVELOPMENT: "webhookPublisher.development.tfplan"
  TF_VAR_TERRAFORM_PATH_PRODUCTION: "webhookPublisher.production.tfplan"

jobs:
  build-lambda:
    name: 'Build Lambda'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Build SBT
        run: sbt compile

  test-lambda:
    name: 'Test Lambda'
    runs-on: ubuntu-latest
    environment: development
    needs: build-lambda
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'
      - name: Set up SBT
        uses: sbt/setup-sbt@v1
      - name: Build and Test with Coverage
        run: |
          sbt coverage test
          sbt coverageReport
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v5
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish-lambda:
    name: 'Publish Lambda'
    runs-on: ubuntu-latest
    environment: development
    needs: test-lambda
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: corretto
          cache: 'sbt'

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Publish New Lambda Function
        run: sbt assembly

      - name: Upload Lambda as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmailWebhookHandlerLambda
          path: ${{ env.TF_VAR_LAMBDA_PATH }}

      - name: Upload dependency graph
        uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91

  check-terraform:
    name: 'Check Terraform'
    runs-on: ubuntu-latest
    environment: development
    needs: publish-lambda

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

  plan-terraform-development:
    name: 'Plan Terraform Development'
    runs-on: ubuntu-latest
    environment: development
    needs: check-terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Download Lambda as Artifact
      uses: actions/download-artifact@v4
      with:
        name: EmailWebhookHandlerLambda
        path: ${{ env.TF_VAR_LAMBDA_PATH }}

    - name: Terraform Plan
      env:
        TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
        TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
        TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
        TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
        TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_PATH }}
        TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
      run: terraform plan -out=${{ env.TF_VAR_TERRAFORM_PATH_DEVELOPMENT }}

    - name: Upload Terraform Plan as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EmailWebhookHandlerPlan
        path: ${{ env.TF_VAR_TERRAFORM_PATH_DEVELOPMENT }}

  publish-terraform-development:
    name: 'Publish Terraform Development'
    runs-on: ubuntu-latest
    environment: development
    needs: plan-terraform-development

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Download Terraform Plan as Artifact
        uses: actions/download-artifact@v4
        with:
          name: EmailWebhookHandlerPlan
          path: ${{ env.TF_VAR_TERRAFORM_PATH_DEVELOPMENT }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  plan-terraform-production:
    name: 'Plan Terraform Production'
    runs-on: ubuntu-latest
    environment: production
    needs: publish-terraform-development

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Download Lambda as Artifact
        uses: actions/download-artifact@v4
        with:
          name: EmailWebhookHandlerLambda
          path: ${{ env.TF_VAR_LAMBDA_PATH }}

      - name: Terraform Plan
        env:
          TF_VAR_discord_name: ${{ vars.TF_VAR_DISCORD_NAME }}
          TF_VAR_domain_name: ${{ vars.TF_VAR_DOMAIN_NAME }}
          TF_VAR_recipient: ${{ vars.TF_VAR_RECIPIENT }}
          TF_VAR_webhook_address: ${{ vars.TF_VAR_WEBHOOK_ADDRESS }}
          TF_VAR_lambda_path: ${{ env.TF_VAR_LAMBDA_PATH }}
          TF_VAR_aws_access_key_id: ${{ secrets.TF_VAR_AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.TF_AWS_VAR_SECRET_ACCESS_KEY }}
        run: terraform plan -out=${{ env.TF_VAR_TERRAFORM_PATH_PRODUCTION }}

      - name: Upload Terraform Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: EmailWebhookHandlerPlan
          path: ${{ env.TF_VAR_TERRAFORM_PATH_PRODUCTION }}

  publish-terraform-production:
    name: 'Publish Terraform Production'
    runs-on: ubuntu-latest
    environment: production
    needs: plan-terraform-production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Download Terraform Plan as Artifact
        uses: actions/download-artifact@v4
        with:
          name: EmailWebhookHandlerPlan
          path: ${{ env.TF_VAR_TERRAFORM_PATH_PRODUCTION }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
